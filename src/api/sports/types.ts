/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/users/sport_info": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Me
     * @description Get current sport hours, semesters info, and nearest check-ins
     */
    get: operations["users_get_me"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** Checkin */
    Checkin: {
      /**
       * Title
       * @description Sport name
       */
      title: string;
      /**
       * Start
       * @description Training start time
       */
      start: string;
      /**
       * End
       * @description End time of training
       */
      end: string;
      /**
       * Training Class
       * @description Place of training
       */
      training_class: string;
      /**
       * Group Accredited
       * @description Accreditation of training
       */
      group_accredited: boolean;
    };
    /** Profile */
    Profile: {
      /**
       * Id
       * @description User id on sports website
       */
      id: string;
      /**
       * Name
       * @description User's first and last name
       */
      name: string;
      /**
       * Email
       * @description User university email
       */
      email: string;
      /**
       * Medical Group
       * @description User medical group for sport
       */
      medical_group: string;
    };
    /** Semester */
    Semester: {
      /**
       * Id Sem
       * @description Semester id
       */
      id_sem: number;
      /**
       * Hours Not Self
       * @description Earned hours of training by appointment
       */
      hours_not_self: number;
      /**
       * Hours Self Not Debt
       * @description Hours earned in personal training
       */
      hours_self_not_debt: number;
      /**
       * Hours Self Debt
       * @description Earned hours in personal training to cover hours debt
       */
      hours_self_debt: number;
      /**
       * Hours Sem Max
       * @description Number of hours required to complete the semester
       */
      hours_sem_max: number;
      /**
       * Debt
       * @description User's hours debt for previous semesters
       */
      debt: number;
    };
    /** Training */
    Training: {
      /**
       * Hours
       * @description Duration of training
       */
      hours: number;
      /**
       * Group
       * @description Sport name
       */
      group: string;
      /**
       * Timestamp
       * Format: date-time
       * @description Training start time
       */
      timestamp: string;
      /**
       * Approved
       * @description Hours approval
       */
      approved: boolean;
    };
    /** ViewUser */
    ViewUser: {
      profile: components["schemas"]["Profile"];
      /**
       * Checkins
       * @description List of workouts the user has signed up for in the coming week
       */
      checkins: components["schemas"]["Checkin"][];
      /**
       * Old Semesters
       * @description Hours earned for past semesters
       */
      old_semesters: components["schemas"]["Semester"][];
      /** @description Current semester */
      ongoing_semester: components["schemas"]["Semester"];
      /**
       * Trainings History
       * @description List of attended trainings for the current semester
       */
      trainings_history: components["schemas"]["Training"][];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type SchemaCheckin = components["schemas"]["Checkin"];
export type SchemaProfile = components["schemas"]["Profile"];
export type SchemaSemester = components["schemas"]["Semester"];
export type SchemaTraining = components["schemas"]["Training"];
export type SchemaViewUser = components["schemas"]["ViewUser"];
export type $defs = Record<string, never>;
export interface operations {
  users_get_me: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Current sport info for user */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ViewUser"];
        };
      };
      /** @description Unable to verify credentials OR Credentials not provided */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
}
